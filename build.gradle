import net.minecraftforge.gradle.common.util.ModConfig
import net.minecraftforge.gradle.common.util.RunConfig
import org.apache.maven.artifact.versioning.ComparableVersion

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'org.apache.maven', name: 'maven-artifact', version: '3.6.3+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'
//apply plugin: 'org.spongepowered.mixin'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'

loadSecrets()

group = 'io.github.noeppi_noeppi.mods'
archivesBaseName = 'PatchouliJam'
version = getVersion(project, group, archivesBaseName, "${mc_version}-${base_version}")

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println "${archivesBaseName} version: ${version}"

minecraft {
    mappings(mappings_channel, mappings_version)
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    createRunConfig("client")
    createRunConfig("server")
    createRunConfig("data", { RunConfig run ->
        run.args "--mod", modid, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources"), "--existing", file("libs/resources")
    })
}

def createRunConfig(String name, Closure extra = {}) {
    minecraft.runs.create(name) { RunConfig run ->
        run.workingDirectory project.file("run" + name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase())
        run.property "forge.logging.markers", "SCAN,REGISTRIES"
        run.jvmArg "-Dmixin.env.disableRefMap=true"
        run.property "forge.logging.console.level", "debug"
        run.mods.create(modid) { ModConfig mod ->
            source sourceSets.main
        }
    }.with(extra)
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    mavenCentral()
    maven {
        name = 'Forge'
        url = 'https://files.minecraftforge.net/maven/'
    }
    maven {
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        name = 'ModMaven'
        url = 'https://modmaven.k-4u.nl'
    }
    maven {
        name = 'MelanX Maven'
        url = 'https://maven.melanx.de/'
    }
    maven {
        name = 'Patchouli'
        url = 'https://maven.blamejared.com/'
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    compile fg.deobf('vazkii.patchouli:Patchouli:1.16-42')

    runtimeOnly fg.deobf('curse.maven:jolly-boxes-410698:3128220')
    runtimeOnly fg.deobf('curse.maven:christmas-wish-in-a-bottle-421252:3122897')
    runtimeOnly fg.deobf('curse.maven:snowy-weaponry-424431:3132222')
    compile fg.deobf('curse.maven:next-christmas-420409:3126380')
    runtimeOnly fg.deobf('curse.maven:festive-creepers-420919:3130796')
    runtimeOnly fg.deobf('curse.maven:cold-snap-horde-426031:3142685')
    runtimeOnly fg.deobf('curse.maven:workshops-of-doom-426387:3133380')
    compile fg.deobf('curse.maven:naughty-or-nice-426690:3135674')
    runtimeOnly fg.deobf('curse.maven:looot-420925:3131801')
    compile fg.deobf('curse.maven:fancy-snowy-weather-420458:3113735')
    runtimeOnly fg.deobf('curse.maven:yellow-snow-420856:3145436')
    runtimeOnly fg.deobf('curse.maven:decorative-winter-430836:3151003')

    runtimeOnly fg.deobf('curse.maven:libx-412525:3112224')
    runtimeOnly fg.deobf('curse.maven:jellyfishing-397703:3128612')
    runtimeOnly fg.deobf('curse.maven:geckolib-388172:3120121')
    runtimeOnly fg.deobf('curse.maven:decorative-block-362528:3147088')
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : modid,
                'Specification-Vendor'    : "noeppi_noeppi",
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : "noeppi_noeppi",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
jar.finalizedBy('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact jar

            pom {
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url file('modjars').toPath().toAbsolutePath().normalize().toString()
        }
    }
}

curseforge {
    apiKey = findProperty('curse_auth') ?: 0
    def versions = "${curse_versions}".split(',')
    project {
        if (project.hasProperty('curse_project')) {
            id = "${curse_project}"
            releaseType = 'alpha'
            changelog = getGitChangelog()
            println(changelog)
            changelogType = 'markdown'

            versions.each {
                addGameVersion "${it}"
            }

            if (project.hasProperty('curse_requirements') || project.hasProperty('curse_optionals')) {
                mainArtifact(jar) {
                    relations {
                        if (project.hasProperty('curse_requirements')) {
                            def requirements = "${curse_requirements}".split(',')
                            requirements.each {
                                requiredLibrary "${it}"
                            }
                        }

                        if (project.hasProperty('curse_optionals')) {
                            def optionals = "${curse_optionals}".split(',')
                            optionals.each {
                                optionalLibrary "${it}"
                            }
                        }
                    }
                }
            }
        }
    }
}

private static String getVersion(Project project, String group, String artifact, String baseVersion) {
    java.nio.file.Path mavenPath = project.file('modjars').toPath().resolve(group.replace('.', '/')).resolve(artifact)
    if (!Files.isDirectory(mavenPath)) {
        return "${baseVersion}.0"
    }
    return "${baseVersion}." + Files.walk(mavenPath)
            .filter{path -> Files.isRegularFile(path) && path.getFileName().toString().endsWith('.pom')}
            .map{path ->
                String fileName = path.getFileName().toString()
                fileName.substring(fileName.indexOf('-', artifact.size()) + 1, fileName.length() - 4)
            }.filter{version -> version.startsWith(baseVersion)}
            .max{s1, s2 -> new ComparableVersion(s1).compareTo(new ComparableVersion(s2))}
            .map{ver -> ver.substring(ver.findLastIndexOf{ str -> !"0123456789".contains(str) } + 1)}
            .map{ver -> ver.isEmpty() ? "-1" : ver }
            .map{ver -> (ver.toInteger() + 1).toString()}
            .orElse("0")
}

